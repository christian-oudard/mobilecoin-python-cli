#!/usr/bin/env python3

import argparse
import http
import json
import os
import subprocess
from pathlib import Path

import requests

NETWORK = 'testnet'
assert NETWORK in ['testnet', 'mainnet']
MC_DATA = Path.home() / '.mobilecoin'
LOG_LOCATION = MC_DATA / 'node_log.txt'


class MobileCoinClient(object):

    url = 'http://127.0.0.1:9090/wallet'

    def __init__(self):
        parser = argparse.ArgumentParser(
            prog='mobilecoin',
            description='MobileCoin command-line wallet.',
            usage='mobilecoin <command>',
        )
        parser.add_argument('-v', '--verbose', action='store_true')

        subparsers = parser.add_subparsers(dest='command')

        start_args = subparsers.add_parser('start', help='Start the local MobileCoin node.')
        start_args.add_argument('--offline', action='store_true')
        start_args.add_argument('--bg', action='store_true')

        subparsers.add_parser('stop', help='Stop the local MobileCoin node.')

        subparsers.add_parser('list', help='List accounts.')

        create_args = subparsers.add_parser('create', help='Create a new account.')
        create_args.add_argument('name', help='Account name')

        import_args = subparsers.add_parser('import', help='Import an account.')
        import_args.add_argument('-f', '--file', metavar='file', help='Account secret json file.')
        import_args.add_argument('entropy', help='Secret entropy.', nargs='?')
        import_args.add_argument('name', help='Account name', nargs='?')
        import_args.add_argument('-H', '--height', help='Account height', type=int)

        delete_args = subparsers.add_parser('delete', help='Delete an account from local storage.')
        delete_args.add_argument('account_id', help='Account ID code.')

        transactions_args = subparsers.add_parser('transactions', help='List account transactions.')
        transactions_args.add_argument('-f', '--file', metavar='file', help='Account secret json file.')
        transactions_args.add_argument('account_id', help='Account ID code.', nargs='?')

        self.args = parser.parse_args()

        # Check args.
        if self.args.command == 'import':
            if (
                self.args.file is None
                and (
                    self.args.entropy is None
                    or self.args.name is None
                )
            ):
                print('Please provide entropy and account name, or a secret key file to import.')
                import_args.print_help()
                exit(1)

        if self.args.command == 'transactions':
            if (
                self.args.file is None
                and self.args.account_id is None
            ):
                print('Please provide an account id or a secret key file.')
                transactions_args.print_help()
                exit(1)

        # Can't name a method "import", so fix it here.
        setattr(self, 'import', self.import_)

        # Dispatch command.
        command = self.args.command
        if command is None or not hasattr(self, command):
            parser.print_help()
            exit(1)
        getattr(self, command)()

    def start(self):
        if NETWORK == 'testnet':
            node_command = ['full-service-testnet']
        elif NETWORK == 'mainnet':
            node_command = ['full-service-mainnet']

        node_command += [
            '--wallet-db', str(MC_DATA / 'wallet-db/encrypted-wallet.db'),
            '--ledger-db', str(MC_DATA / 'ledger-db'),
        ]
        if self.args.offline:
            node_command += [
                '--offline',
            ]
        else:
            if NETWORK == 'testnet':
                node_command += [
                    '--peer mc://node1.test.mobilecoin.com/',
                    '--peer mc://node2.test.mobilecoin.com/',
                    '--tx-source-url https://s3-us-west-1.amazonaws.com/mobilecoin.chain/node1.test.mobilecoin.com/',
                    '--tx-source-url https://s3-us-west-1.amazonaws.com/mobilecoin.chain/node2.test.mobilecoin.com/',
                ]
            elif NETWORK == 'mainnet':
                node_command += [
                    '--peer', 'mc://node1.prod.mobilecoinww.com/',
                    '--peer', 'mc://node2.prod.mobilecoinww.com/',
                    '--tx-source-url', 'https://ledger.mobilecoinww.com/node1.prod.mobilecoinww.com/',
                    '--tx-source-url', 'https://ledger.mobilecoinww.com/node2.prod.mobilecoinww.com/',
                ]
        if self.args.bg:
            node_command += [
                '>', str(LOG_LOCATION), '2>&1'
            ]

        if NETWORK == 'testnet':
            print('Starting TestNet node...')
        elif NETWORK == 'mainnet':
            print('Starting MobileCoin node...')

        if self.args.verbose:
            print(' '.join(node_command))

        MC_DATA.mkdir(exist_ok=True)
        (MC_DATA / 'ledger-db').mkdir(exist_ok=True)
        (MC_DATA / 'wallet-db').mkdir(exist_ok=True)

        os.environ['RUST_LOG'] = 'info'
        os.environ['mc_ledger_sync'] = 'info'
        if self.args.bg:
            subprocess.Popen(' '.join(node_command), shell=True)
            print('Started, view log at {}.'.format(LOG_LOCATION))
            print('Stop server with "mobilecoin stop".')
        else:
            subprocess.run(' '.join(node_command), shell=True)

    def stop(self):
        print('Stopping MobileCoin node...')
        if NETWORK == 'testnet':
            subprocess.Popen(['killall', '-v', 'full-service-testnet'])
        elif NETWORK == 'mainnet':
            subprocess.Popen(['killall', '-v', 'full-service'])

    def req(self, request_data):
        if self.args.verbose:
            print('POST', self.url)
            print(json.dumps(request_data, indent=4))
            print()

        try:
            r = requests.post(self.url, json=request_data)
        except requests.ConnectionError:
            print(f'Could not connect to server at {self.url}. Try running ./mobilecoin start')
            exit(1)
        try:
            response_data = r.json()
        except ValueError:
            print(r.text)
            exit(1)

        if self.args.verbose:
            print(r.status_code, http.client.responses[r.status_code])
            print(json.dumps(response_data, indent=4))
            print()

        return response_data

    def list(self):
        self.req({"method": "get_all_accounts"})

    def create(self):
        data = self.req({
            "method": "create_account",
            "params": {
                "name": self.args.name
            }
        })
        account_data = data['result']
        account_id = account_data['account']['account_id']
        filename = f'mobilecoin_secret_{account_id}.json'
        with open(filename, 'w') as f:
            json.dump(data['result'], f, indent=4) 
        print(f'Created a new account, "{self.args.name}".')
        print(f'Wrote secret credentials to {filename}')

    def import_(self):
        if self.args.file is not None:
            with open(self.args.file) as f:
                account_data = json.load(f)
                entropy = account_data['entropy']
                name = account_data['account']['name']
        else:
            entropy = self.args.entropy
            name = self.args.name

        assert entropy is not None
        assert name is not None

        params = {
            "entropy": entropy,
            "name": name
        }
        if self.args.height is not None:
            params["height"] = self.args.height

        self.req({
            "method": "import_account",
            "params": params,
        })

    def delete(self):
        confirmation = input(
            'This will delete all information for the account {}. Continue? (Y/n) '.format(
                self.args.account_id)
        )
        if confirmation.lower() not in ['y', 'yes']:
            print('Cancelled.')
            return

        self.req({
            "method": "delete_account",
            "params": {
                "account_id": self.args.account_id,
            }
        })

    def transactions(self):
        if self.args.file is not None:
            with open(self.args.file) as f:
                account_data = json.load(f)
                account_id = account_data['account']['account_id']
        else:
            account_id = self.args

        assert account_id is not None

        self.req({
            "method": "get_all_txos_by_account",
            "params": {
                "account_id": account_id
            }
        })


if __name__ == '__main__':
    MobileCoinClient()
